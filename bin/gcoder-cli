#!/usr/bin/env node

'use strict';
var program = require('commander');
var pkg = require('../package');
var execSync = require('child_process').execSync;

var Logger = require('../lib/logger');
var GenHandler = require('../lib/handler/gen.handler');
var InitHandler = require('../lib/handler/init.handler');
var GCoderHandler = require('../lib/handler/gcoder.handler');
var Logger = require('../lib/logger');

var {Plugin} = require('gcoder');

var hanlder = null;
program
  .version(pkg.version)
  .option('--verbose', 'more debug info');

program
  .command('gen <template>')
  .description('generate code')
  .option("-t, --table [table]", "specify table")
  .action(function (template, options) {
    hanlder = new GenHandler({
      template:template,
      tables:options.table,
    });
  });

  program
  .command('add <url>')
  .description('add gcoder')
  .action(function (url, options) {
    hanlder = new GCoderHandler({
      op:"add",
      url:url,
    });
  });


  program
  .command('list')
  .description('list gcoder')
  .action(function (url, options) {
    hanlder = new GCoderHandler({
      op:"list",
    });
  });

program
  .command('init')
  .description('init .gcoder.json')
  .action(function (options) {
    hanlder = new InitHandler(options.platform);
  });

program.parse(process.argv);

let exeStr = `npm view ${pkg.name} version`;
let npmVersion = execSync(exeStr).toString();
if (npmVersion &&  pkg.version !== npmVersion.trim()) {
  Logger.info(`version ${pkg.version} is outdate`);
  Logger.info(`run: npm i -g ${pkg.name}@${npmVersion}`);
  return;
}

if (!hanlder) {
  var cmd = program.args[0];
  if (cmd !== undefined) {
    Logger.error(`command ${cmd} not found`);
  }
  program.help();
  return;
}

hanlder.do();
